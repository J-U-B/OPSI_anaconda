;=====================================================================
; delsub.opsiinc ANACONDA
;
; Jens Boettge <boettge@mpi-halle.mpg.de>  2023-08-23 15:18:02 +0200
;=====================================================================
encoding=utf8

;=======================================
[sub_delsub_main]
;=======================================
Message "Removing previous version(s) of " + $ProductName$
ShowBitmap $Img_Uninstall$ $ProductName$
marktime

if FileExists("%ScriptPath%\checkinstance.opsiinc")
	include_append "%ScriptPath%\checkinstance.opsiinc"
	sub_checkinstance_init
else
	isFatalError "File not found: checkinstance.opsiinc"
endif

;=== get list of UninstIDs from registry:
if FileExists("%ScriptPath%/lib/lib_registry_functions.opsiinc")
	importlib "lib/lib_registry_functions.opsiinc"
	;=== search in registry for available uninstall information
	; Anaconda 3 is only available for 64 bit:
	Set $ResultList$ = PSSearchRegistryUninstallKeysByAttribute("DisplayName", $SearchPattern$,  "64")
else
	logError "Can't load library lib_registry_functions.opsiinc"
	Set $ResultList$ = emptyList($ResultList$)
endif

if not ( count ($ResultList$) = "0" )
	;=== process uninstall for all found uninstall sections:
	for %id% in $ResultList$ do sub_Uninstall_ID

	;=== custom post uninstall
	if not ($CustomPostUninstall$ = "none")
		if FileExists("%ScriptPath%\custom\" + $CustomPostUninstall$)
			ShowBitmap $Img_Uninstall_Custom$ $ProductName$
			comment "Starting custom post uninstall"
			include_append "%ScriptPath%\custom\" + $CustomPostUninstall$
			SUB_POST_UNINSTALL
			ShowBitmap $Img_Uninstall$ $ProductName$
		else
			logError "Can't find custom post uninstall script: %ScriptPath%\custom\" + $CustomPostUninstall$
		endif
	endif

	;=== update productOnClient information on depot server
	Message "Updating status information on depot"
	if not ($ProductFilterForbidden$ = "")
		set $result$ = clearProductVerOnClientStatus($ProductFilterForbidden$, $ProductVersionFilter$, 'forbidden', 'not_installed')
	endif
	set $result$ = clearProductVerOnClientStatus($ProductFilter$, $ProductVersionFilter$, 'undefined', 'not_installed')

	;=== measure time
	set $TimeDiff$ = getDiffTimeSec
	Message  "Removal time: " + $TimeDiff$ + " seconds"	

else
	comment "Empty result list while searching for " + $ProductName$ + " in registry - does not seem to be installed"

	;=== Workaround for missing uninstall key in registry
	set $Uninst_RegDir$ = $InstallDir$
	if fileExists($Uninst_RegDir$)
		logWarning "No uninstall key found in registry, but there is an install directory at: " + $Uninst_RegDir$
		Switch $pr_onMissingUninstallKey$
			Case "defer"
				if (FileExists($Img_Defer$))
					ShowBitmap $Img_Defer$	 $ProductName$
				endif
				Message "Deferring action"
				set $result$ = currentProductSetReport("deferred")
				isSuspended
			EndCase
			Case "rough delete"
				logWarning "Deleting existing install directory (by property)!"
				Files_del_InstallDir
				if fileExists($Uninst_RegDir$)
					logError "Install dir still exists!"
				endif
			EndCase
			Case "ignore"
				logWarning "Ignoring missing uninstall key in registry (by property); this may result in an error!"
			EndCase
			DefaultCase
				logError "Bailing out because of missing uninstall key in registry but existing install dir (by property)."
				isFatalError "missing uninstall key"
			EndCase
		EndSwitch
	endif
endif


;=======================================
[sub_Uninstall_ID]
;=======================================

set $RegKey$			= takeString(0, splitString("%id%", "|"))
set $Uninst_Arch$		= takeString(1, splitString("%id%", "|"))
set $DisplayName$		= takeString(2, splitString("%id%", "|"))
set $Uninst_ID$			= takeString(-1, splitString($RegKey$, "\"))
set $RegKey$			= "[" + $RegKey$ + "]"

; set $DisplayName$		= GetRegistryStringValueSysNative($RegKey$ + " DisplayName")
set $Inst_Loc$			= GetRegistryStringValueSysNative($RegKey$ + " InstallLocation")
set $Inst_Ver$			= GetRegistryStringValueSysNative($RegKey$ + " DisplayVersion")
set $UninstallString$	= GetRegistryStringValueSysNative($RegKey$ + " UninstallString")

if ($UninstallString$ = "")
	LogError "Missing UninstallString for [%id%] -- skipping"
else
	; comment "Start uninstall sub section for " + $Inst_Ver$ + " (" + $Uninst_Arch$ + ")"
	comment "Start uninstall sub section for " + $Inst_Ver$
	;=== uninstall (if uninstaller exists)
	if not ($UninstallString$ = "") and fileExists($UninstallString$)
		Sub_Uninstall
	else
		logError "Uninstaller does not exist!"
		comment "Cleaning up orphaned registry entry " + $Uninst_ID$ + " (" + $Uninst_Arch$ + ")"
		if $Uninst_Arch$ = "x64"
			Registry_DeleteUninstKey /64Bit
		else
			Registry_DeleteUninstKey /32Bit
		endif
	endif
endif


;======================================================================
[Sub_Uninstall]
;======================================================================
ShowBitmap $Img_Uninstall$ $ProductName$
Message "Uninstalling previous setup of " + $ProductName$ + " " + $Inst_Ver$

;=== get uninstall directory
sub_check_PathVar

;=== compare current InstallLocation with InstallDir from this package:
if not (lower($Uninst_RegDir$) = lower($InstallDir$))
	logWarning "Current installation is not at the expected location:"
	comment "   Current InstallLocation: [" + $Uninst_RegDir$ + "]"
	comment "   Expected Location:       [" + $InstallDir$ + "]"
endif

;=== compare current Uninstaller with InstallDir from this package:
if not (lower($Uninstaller$) = lower(stringReplace($UninstallString$,'"','')))
	logWarning "Expected $UninstallString$ from registry does not match $Uninstaller$ from package:"
	comment "   [" + $UninstallString$ + "] <> [" + $Uninstaller$ + "]"
endif

;=== check for running binaries
;...the application:
set $Kill_Override$ = "false"
set $PSDETAIL_MODE$ = ""
set $CheckProcess$ = $Uninst_RegDir$ + $CheckBin$
sub_checkinstance
set $TempList$ = emptyList($TempList$)
for %p% in $EXE$ do set $TempList$ = addToList($TempList$, stringReplace($Uninst_RegDir$+"\%p%", "\\", "\"))
for %p% in $TempList$ do sub_checkinstance

;=== run uninstaller
LinkFolder_RemoveDesktopLink
Winbatch_Uninstall /WaitForProcessEnding $Uninst_Prg_Hidden$
sub_check_exitcode_nsis
if not($FatalError$ = "")
	isFatalError "Uninstaller returns fatal error!"
endif
if ($ExitCode$ = "0") and not ($Uninst_RegDir$ = "")
	;=== does the installation directory still exist?
	if (FileExists($Inst_Loc$))
		logWarning "Install directory still exists: [" + $Inst_Loc$ + "]"
		;=== try final cleanup
		Files_del_InstallDir
	endif
endif


;======================================================================
[Winbatch_Uninstall]
;======================================================================
; "$Uninstaller$" $Uninst_Opts$
$UninstallString$  $Uninst_Opts$


;======================================================================
[Files_del_InstallDir]
;======================================================================
delete -sfc "$Uninst_RegDir$"


;=====================================================================
[LinkFolder_RemoveDesktopLink]
;=====================================================================
set_basefolder common_desktopdirectory
set_subfolder ""
delete_element $AppName$
delete_element $ProductName$ Prompt
delete_element $ProductName$ PowerShell
delete_element Jupyter QtConsole
delete_element Jupyter Notebook
delete_element Spyder

;======================================================================
[sub_check_Exitcode]
;======================================================================
set $ExitCode$ = getLastExitCode
if not ($ExitCode$ = "0")
	logWarning "Last operation returned exitcode " + $ExitCode$
endif


;======================================================================
[sub_check_PathVar]
;======================================================================
if ($Inst_Loc$ = "")
	;===get install location from $UninstallString$
	set $Uninst_RegDir$ = stringReplace(lower(ExtractFilePath($UninstallString$)),'"','')
else 
	set $Uninst_RegDir$ = stringReplace(lower($Inst_Loc$) + "\", "\\", "\")
endif


;======================================================================
[Registry_DeleteUninstKey]
;======================================================================
DeleteKey $RegKey$

;=====================================================================
[sub_end]
;=====================================================================
