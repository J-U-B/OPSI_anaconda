;=====================================================================
; delsub.opsiinc ANACONDA
;
; Jens Boettge <boettge@mpi-halle.mpg.de>  2022-05-12 13:26:42 +0200
;=====================================================================


;=======================================
[sub_delsub_main]
;=======================================
Message "Removing previous version(s) of " + $ProductName$
ShowBitmap $Img_Uninstall$ $ProductName$
marktime

if FileExists("%ScriptPath%\checkinstance.opsiinc")
	include_append "%ScriptPath%\checkinstance.opsiinc"
	sub_checkinstance_init
else
	isFatalError "File not found: checkinstance.opsiinc"
endif


;=== get list of UninstIDs from registry:
if FileExists("%ScriptPath%\uninst_section_search.opsiinc")
	;=== search in registry for available uninstall information
	include_append "%ScriptPath%\uninst_section_search.opsiinc"
	Sub_search_registry_uninstall_keys
else
	;=== fallback
	Set $ResultList$ = CreateStringList($Uninst_ID_std$ + "|x32")
endif

if not ( count ($ResultList$) = "0" )
	
	;=== process uninstall for all found uninstall sections:
	for %id% in $ResultList$ do sub_Uninstall_ID
	
	;=== custom post uninstall
	if not ($CustomPostUninstall$ = "none")
		if FileExists("%ScriptPath%\custom\" + $CustomPostUninstall$)
			ShowBitmap $Img_Uninstall_Custom$ $ProductName$
			comment "Starting custom post uninstall"
			include_append "%ScriptPath%\custom\" + $CustomPostUninstall$
			SUB_POST_UNINSTALL
			ShowBitmap $Img_Uninstall$ $ProductName$
		else
			logError "Can't find custom post uninstall script: %ScriptPath%\custom\" + $CustomPostUninstall$
		endif
	endif	
	
	;=== update productOnClient information on depot server
	Message "Updating status information on depot"
	if not ($ProductFilterForbidden$ = "")
		set $result$ = clearProductVerOnClientStatus($ProductFilterForbidden$, $ProductVersionFilter$, 'forbidden', 'not_installed')
	endif
	set $result$ = clearProductVerOnClientStatus($ProductFilter$, $ProductVersionFilter$, 'undefined', 'not_installed')

	;=== measure time
	set $TimeDiff$ = getDiffTimeSec
	Message  "Removal time: " + $TimeDiff$ + " seconds"	
	
else
	comment "Empty result list while searching for " + $ProductName$ + " in registry - does not seem to be installed"
endif



;=======================================
[sub_Uninstall_ID]
;=======================================
set $Uninst_ID$    	= takeString(0, splitString("%id%", "|"))
set $Uninst_Arch$  	= takeString(1, splitString("%id%", "|"))

set $RegKey$		="[HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\" + $Uninst_ID$ + "]"

Switch $Uninst_Arch$
	Case "x32"
			set $DisplayName$    	= GetRegistryStringValue32($RegKey$ + " DisplayName")
			set $Inst_Loc$ 			= GetRegistryStringValue32($RegKey$ + " InstallLocation")
			set $Inst_Ver$ 			= GetRegistryStringValue32($RegKey$ + " DisplayVersion")
			set $UninstallString$  	= GetRegistryStringValue32($RegKey$ + " UninstallString")
	EndCase
	Case "x64"
			set $DisplayName$    	= GetRegistryStringValue64($RegKey$ + " DisplayName")
			set $Inst_Loc$ 			= GetRegistryStringValue64($RegKey$ + " InstallLocation")
			set $Inst_Ver$ 			= GetRegistryStringValue64($RegKey$ + " DisplayVersion")
			set $UninstallString$   = GetRegistryStringValue64($RegKey$ + " UninstallString")
	EndCase
	DefaultCase
			Comment "Invalid architecture for " + $Uninst_ID$ + " given: " + $Uninst_Arch$
	EndCase
EndSwitch



if ($UninstallString$ = "") 
	LogError "Missing UninstallString for [%id%] -- skipping"
else
	; comment "Start uninstall sub section for " + $Inst_Ver$ + " (" + $Uninst_Arch$ + ")"
	comment "Start uninstall sub section for " + $Inst_Ver$
	;=== uninstall (if uninstaller exists)
	if not ($UninstallString$ = "") and fileExists($UninstallString$)
		Sub_Uninstall
	else
		logError "Uninstaller does not exist!"
		comment "Cleaning up orphaned registry entry " + $Uninst_ID$ + " (" + $Uninst_Arch$ + ")"
		if $Uninst_Arch$ = "x64"
			Registry_DeleteUninstKey /64Bit
		else
			Registry_DeleteUninstKey /32Bit
		endif
	endif
endif


;======================================================================
[Sub_Uninstall]
;======================================================================
ShowBitmap $Img_Uninstall$ $ProductName$
Message "Uninstalling previous setup of " + $ProductName$ + " " + $Inst_Ver$

;=== get uninstall directory
sub_check_PathVar

;=== compare current InstallLocation with InstallDir from this package:
if not (lower($Uninst_RegDir$) = lower($InstallDir$))
	logWarning "Current installation is not at the expected location:"
	comment "   Current InstallLocation: [" + $Uninst_RegDir$ + "]"
	comment "   Expected Location:       [" + $InstallDir$ + "]"
endif

;=== compare current Uninstaller with InstallDir from this package:
if not (lower($Uninstaller$) = lower(stringReplace($UninstallString$,'"','')))
	logWarning "Expected $UninstallString$ from registry does not match $Uninstaller$ from package:"
	comment "   [" + $UninstallString$ + "] <> [" + $Uninstaller$ + "]"
endif

;=== check for running binaries
;...the application:
set $Kill_Override$ = "false"
set $PSDETAIL_MODE$ = ""
set $CheckProcess$ = $Uninst_RegDir$ + $CheckBin$
sub_checkinstance
set $TempList$ = emptyList($TempList$)
for %p% in $EXE$ do set $TempList$ = addToList($TempList$, stringReplace($Uninst_RegDir$+"\%p%", "\\", "\"))
for %p% in $TempList$ do sub_checkinstance

;=== run uninstaller
LinkFolder_RemoveDesktopLink
Winbatch_Uninstall /WaitForProcessEnding $Uninst_Prg_Hidden$
sub_check_exitcode_nsis
if not($FatalError$ = "")
	isFatalError "Uninstaller returns fatal error!"
endif
if ($ExitCode$ = "0") and not ($Uninst_RegDir$ = "")
	;=== does the installation directory still exist?
		if (FileExists($Inst_Loc$))
			logWarning "Install directory still exists: [" + $Inst_Loc$ + "]"
			;=== try final cleanup
			Files_del_InstallDir
		endif
endif	


;======================================================================
[Winbatch_Uninstall]
;======================================================================
; "$Uninstaller$" $Uninst_Opts$
$UninstallString$  $Uninst_Opts$


;======================================================================
[Files_del_InstallDir]
;======================================================================
delete -sfc "$Uninst_RegDir$"


;=====================================================================
[LinkFolder_RemoveDesktopLink]
;=====================================================================
set_basefolder common_desktopdirectory
set_subfolder ""
delete_element $AppName$
delete_element $ProductName$ Prompt
delete_element Jupyter Notebook
delete_element Spyder

;======================================================================
[sub_check_Exitcode]
;======================================================================
set $ExitCode$ = getLastExitCode
if not ($ExitCode$ = "0")
	logWarning "Last operation returned exitcode " + $ExitCode$
endif


;======================================================================
[sub_check_PathVar]
;======================================================================
if ($Inst_Loc$ = "")
	;===get install location from $UninstallString$
	set $Uninst_RegDir$ = stringReplace(lower(ExtractFilePath($UninstallString$)),'"','')
else 
	set $Uninst_RegDir$ = stringReplace(lower($Inst_Loc$) + "\", "\\", "\")
endif


;======================================================================
[Registry_DeleteUninstKey]
;======================================================================
DeleteKey $RegKey$

;=====================================================================
[sub_end]
;=====================================================================
