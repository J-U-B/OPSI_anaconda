;=====================================================================
; product specific variables ANACONDA
;
; J. Boettge <boettge@mpi-halle.mpg.de>  2023-03-22 15:19:15 +0100
;=====================================================================

include_insert "%ScriptPath%\variables.opsiinc"

Set $MAP$ 				= getProductMap
Set $FullProductId$   	= getValue("id", $MAP$)
Set $ProductName$     	= getValue("name", $MAP$)
Set $Version$         	= getValue("ProductVersion", $MAP$)
Set $ActionRequest$		= getValue("actionreuest", $MAP$)
Set $State$				= getValue("installationstate", $MAP$)
Set $SystemType$      	= GetSystemType
Set $OS$                = GetOS
Set $Stage$             = lower("{{STAGE}}")

;-----------------------------------------------------------
;*** basic requirements
;-----------------------------------------------------------
requiredWinstVersion >= "4.12.6.2"

;-----------------------------------------------------------
;*** check OS
;-----------------------------------------------------------
if not($OS$ = "Windows_NT")
       logError "Installation aborted: wrong OS  â€” This package only supports Windows"
       isFatalError
endif

Set $NTVersion$	= GetMsVersionInfo
if CompareDotSeparatedNumbers($NTVersion$, "<", "10.0")
	LogError "OS is not Windows 10 or above"
	isFatalError
endif

if not ($SystemType$ = "64 Bit System")
	; LogError "OS is not a 64 Bit System"
	; isFatalError

	LogWarning "OS is not a 64 Bit System; 32 Bit is not explicitly supported"
endif

;-----------------------------------------------------------
;*** helper functions
;-----------------------------------------------------------
importlib "helpers.opsifunc"

;-----------------------------------------------------------
;*** get LogLevel from property
Set $LogLevelDefault$ = GetProductProperty("log_level","default")
;-----------------------------------------------------------
;*** detect testing package:
if (strPos($FullProductId$, "0_") = "0") and (strPos($FullProductId$, "test_") = "0") and (strPos($Stage$,"test") = "0")
	; not a testing package
	comment "INFO: RELEASE package detected"
	set $ProductId$  	= $FullProductId$ 
	set $Testing$ 		= "false"
	if ($LogLevelDefault$ = "default")
		set $LogLevelDefault$  	= "{{DEFAULT_RELEASE_LOGLEVEL}}"
	endif
else
	; this is a testing package
	comment "INFO: TESTING package detected"
	if (strPos($FullProductId$, "0_") = "0") and (strPos($FullProductId$, "test_") = "0")
		set $ProductId$	= $FullProductId$
	else
		set $ProductId$	= strPart($FullProductId$, calculate(strPos($FullProductId$,"_") + "+1"), strLength($FullProductId$))
	endif
	set $Testing$ 		= "true"
	if ($LogLevelDefault$ = "default")
		set $LogLevelDefault$  	= "{{DEFAULT_TESTING_LOGLEVEL}}"
	endif
endif
setlogLevel = $LogLevelDefault$

;-----------------------------------------------------------
;*** detect O4I/DFN package:
;-----------------------------------------------------------
if (strPos($FullProductId$, "o4i_") = "0") AND (strPos($FullProductId$, "dfn_") = "0")
	set $isO4I$ = "false"
	set $StrippedProductId$ = $ProductId$
else
	set $isO4I$ = "true"
	set $StrippedProductId$ = strPart($ProductId$,"5",strLength($ProductId$))
endif

; required for full change from dfn_ to o4i_:
if (strPos($FullProductId$, "dfn_") = "0")
	set $isDFN$ = "false"
else
	set $isDFN$ = "true"
endif

;-----------------------------------------------------------
;*** Images
;-----------------------------------------------------------
Set $Img_Base$ = "anaconda"
if (FileExists("%ScriptPath%\..\lib\icons\%installingProdName%.png"))
	set $Img_Install$           = "%ScriptPath%\..\lib\icons\%installingProdName%.png"
	set $Img_Install_Custom$    = "%ScriptPath%\..\lib\icons\%installingProdName%.png"
	Set $Img_Uninstall$         = "%ScriptPath%\..\lib\icons\%installingProdName%.png"
	Set $Img_Uninstall_Custom$  = "%ScriptPath%\..\lib\icons\%installingProdName%.png"
	Set $Img_Prepare$           = "%ScriptPath%\..\lib\icons\%installingProdName%.png"
	Set $Img_Plugins$           = "%ScriptPath%\..\lib\icons\%installingProdName%.png"
	Set $Img_Update$            = "%ScriptPath%\..\lib\icons\%installingProdName%.png"
	Set $Img_Upgrade$           = "%ScriptPath%\..\lib\icons\%installingProdName%.png"
	Set $Img_Config$            = "%ScriptPath%\..\lib\icons\%installingProdName%.png"
	Set $Img_Defer$             = "%ScriptPath%\..\lib\icons\%installingProdName%.png"
else
	if ($isO4I$ = "true")
		set $Img_Install$		= "%ScriptPath%\images\" + $Img_Base$ + "_install_o4i.png"
	else
		set $Img_Install$		= "%ScriptPath%\images\" + $Img_Base$ + "_install.png"
	endif
	set $Img_Install_Custom$	= "%ScriptPath%\images\" + $Img_Base$ + "_install_custom.png"
	Set $Img_Uninstall$			= "%ScriptPath%\images\" + $Img_Base$ + "_uninstall.png"
	Set $Img_Uninstall_Custom$	= "%ScriptPath%\images\" + $Img_Base$ + "_uninstall_custom.png"
	Set $Img_Prepare$			= "%ScriptPath%\images\" + $Img_Base$ + "_prepare.png"
	Set $Img_Plugins$			= "%ScriptPath%\images\" + $Img_Base$ + "_plugins.png"
	Set $Img_Update$			= "%ScriptPath%\images\" + $Img_Base$ + "_update.png"
	Set $Img_Upgrade$			= "%ScriptPath%\images\" + $Img_Base$ + "_upgrade.png"
	Set $Img_Config$            = "%ScriptPath%\images\" + $Img_Base$ + "_config.png"
	Set $Img_Defer$             = "%ScriptPath%\images\" + $Img_Base$ + "_defer.png"
endif

comment "preparing..."
ShowBitmap $Img_Prepare$ $ProductName$

;-----------------------------------------------------------
;*** software architecture; valid values: "32 bit", "64 bit", "sysnative"
;-----------------------------------------------------------
; make the systemtype shorter:
if ($SystemType$ = "64 Bit System")
	set $SystemType$ ="x64"
else
	set $SystemType$ ="x32"
endif

{{#ifdef_64bit_only}}
Set $sw_arch$ = "64 bit"
{{/ifdef_64bit_only}}
{{^ifdef_64bit_only}}
Set $sw_arch$ = GetProductProperty("install_architecture","sysnative")
{{/ifdef_64bit_only}}

Set $sw_arch$ = takeString(0, splitString($sw_arch$, " "))

if ( $sw_arch$ = "sysnative" )
	if ($SystemType$ = "x64")
		Set $sw_arch$ = "64"
	else
		Set $sw_arch$ = "32"
	endif
endif

if ($sw_arch$ = "64")
	; 64 bit software
	; set $InstallBase$ = "%ProgramFiles64Dir%"
	set $sArch$ = "_64"
else
	; 32 bit software
	; set $InstallBase$ = EnvVar("ProgramFiles(x86)")
	set $sArch$ = ""
endif

if ($SystemType$="x86 System") and ($sw_arch$="64")
	LogError "Cannot install 64 bit version of " + $ProductName$ + " on a 32 bit operating system!"
	isFatalError
endif

;-----------------------------------------------------------
;*** property: use a local copy of the installer?
;-----------------------------------------------------------
Set $pr_localCopy$          = GetProductProperty("local_installer_copy","False")

;-----------------------------------------------------------
;*** property: language - "de_DE, "en_US"
; application language defined via environment variable LANG
;-----------------------------------------------------------
; Set $sw_lang$ 				= GetProductProperty("default_language","en_US")
set $sw_lang$ = "default"

;-----------------------------------------------------------
;*** property: create desktop/startmenu/quickstart link?
;-----------------------------------------------------------
Set $pr_DesktopLink_Navigator$ 		= GetProductProperty("link_desktop_Anaconda_Navigator","False")
Set $pr_DesktopLink_Spyder$ 		= GetProductProperty("link_desktop_Spyder","False")
Set $pr_DesktopLink_Jupyter$ 		= GetProductProperty("link_desktop_Jupyter_Notebook","False")
Set $pr_DesktopLink_AnacondaPrompt$	= GetProductProperty("link_desktop_Anaconda_Prompt","False")

Set $pr_RegisterSystemPython$       = GetProductProperty("register_as_system_python", "True")
Set $pr_ClearPackageCache$          = GetProductProperty("clear_package_cache", "True")
Set $pr_SkipUpdate$ 				= GetProductProperty("update_skip","False")
Set $pr_SkipFixRights$ 				= GetProductProperty("update_rights_skip","False")
Set $pr_DryUpdate$ 					= GetProductProperty("update_dry_run","False")
Set $pr_VerboseUpdate$ 				= GetProductProperty("update_verbose","False")
Set $pr_ReleaseUpgrade$				= GetProductProperty("upgrade_release","False")
Set $pr_MinimumSpace$				= Trim(GetProductProperty("required_mimimum_space","default"))

Set $pr_AddPack_InstallMode$		= GetProductProperty("additional_packages_install_mode","none")
Set $TempList$						= emptyList($TempList$)
Set $pr_AddPackList$				= GetProductPropertyList("additional_packages",$TempList$)

; make variable(s) compatible for use:
if ($pr_RegisterSystemPython$ = "True")
	set $pr_RegisterSystemPython$   = "1"
else
	set $pr_RegisterSystemPython$   = "0"
endif

;-----------------------------------------------------------
;*** properties: post install/uninstall
;-----------------------------------------------------------
set $CustomPostInstall$     = getProductProperty("custom_post_install","none")
set $CustomPostUninstall$   = getProductProperty("custom_post_uninstall","none")

;-----------------------------------------------------------
;*** misc settings
;-----------------------------------------------------------
{{^ifdef_PSDETAIL_DEBUG}}
set $PSDETAIL$              = "%ScriptPath%\bin\psdetail.exe"
if (CompareDotSeparatedNumbers($NTVersion$, ">=", "10.0"))
	set $PSDETAIL$          = "%ScriptPath%\bin\psdetail4.exe"
endif
{{/ifdef_PSDETAIL_DEBUG}}
{{#ifdef_PSDETAIL_DEBUG}}
set $PSDETAIL$              = "%ScriptPath%\bin\psdetail_debug.exe"
if (CompareDotSeparatedNumbers($NTVersion$, ">=", "10.0"))
	set $PSDETAIL$          = "%ScriptPath%\bin\psdetail4_debug.exe"
endif
{{/ifdef_PSDETAIL_DEBUG}}

set $Kill_Running$          = GetProductProperty("kill_running", "False")

Set $TempDir$               = "%opsiTmpDir%"
Set $RegPathUninstall64$    = "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall"
Set $RegPathUninstall32$    = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall"

;-------------------------------------------------------
; filter for opsiServiceCall productOnClient_getObjects:
;-------------------------------------------------------
set $ProductFilter$	= "*" + $StrippedProductId$
set $ProductVersionFilter$  = "*"

;-----------------------------------------------------------
;*** specific settings
;-----------------------------------------------------------
Set $InstallerType$         = "NSIS"
include_append "%ScriptPath%\exitcode_nsis.opsiinc"

Set $StrippedProductName$   = takeString(0, splitString ($ProductName$ ," "))

; packages (for example):
; 		Anaconda3-5.1.0-Windows-x86_64.exe
; 		Anaconda2-5.1.0-Windows-x86.exe
;Set $Installer$            = "%ScriptPath%\files\" + $StrippedProductId$ + "-" + $Version$ + "-Windows-x86" + $sArch$ + ".exe"
;Set $Installer$             = "%ScriptPath%\files\" + $StrippedProductName$ + "-" + $Version$ + "-Windows-x86" + $sArch$ + ".exe"

Set $InstallerFile$         = $StrippedProductName$ + "-" + $Version$ + "-Windows-x86" + $sArch$ + ".exe"
Set $InstallerSrc$		    = "%ScriptPath%\files\" + $InstallerFile$
if (not (FileExists($InstallerSrc$))) AND ("{{legacy_level}}" INT< "3")
	LogError "FATAL ERROR: Installer not found [" + $InstallerSrc$ + "]"
	isFatalError
endif


Set $installBase$           = "%CommonAppdataDir%"
Set $InstallDir$            = $InstallBase$ + "\" + stringReplace($StrippedProductName$," ", "") + "\"
;Set $InstallDir$           = $InstallBase$ + "\" + $ProductName$ + "\"
Set $InstDir$               = $InstallBase$ + "\" + stringReplace($StrippedProductName$," ", "")
Set $PackageCacheDir$       = $InstDir$ + "\pkgs"

;default value for required space (in MB):
Set $MinimumSpaceDefault$   = "9000"

;Set $MainBin$              = $StrippedProductId$ + ".exe"
;Set $CheckBin$             = $StrippedProductId$ + ".exe"
Set $MainBin$               = "Scripts\anaconda-navigator.exe"
Set $CheckBin$              = "Scripts\anaconda-navigator.exe"
;Set $EXE$                  = CreateStringList('python.exe', 'pythonw.exe', 'Scripts\Spyder.exe', 'Scripts\pandoc.exe', 'Scripts\anaconda.exe', 'Scripts\anaconda-navigator.exe', 'Scripts\jupyter-notebook.exe', 'Scripts\jupyter-qtkonsole.exe')
Set $EXE$                   = CreateStringList('python.exe', 'pythonw.exe', 'Scripts\%.exe')

Set $AppName$               = $StrippedProductName$ + " Navigator"
Set $AppIcon$               = $InstallDir$ + "\Menu\Anaconda-navigator.ico"
Set $AppTarget$             = '"' + $InstallDir$ + 'pythonw.exe"'
Set $AppParameters$         = '-q "' + $InstallDir$ + 'cwp.py" "' + $InstallDir$ + '." "' +  $InstallDir$ + 'pythonw.exe" "' + $InstallDir$ + 'Scripts\anaconda-navigator-script.py"'


Set $SearchPattern$         = $StrippedProductName$
Set $Uninst_ID_std$         = $StrippedProductName$
Set $Uninst_Prg$            = "Uninstall-"+ $StrippedProductId$ + ".exe"
Set $Uninst_Prg_Hidden$     = "Un_A.exe"
Set $Uninstaller$           = $InstallDir$ + $Uninst_Prg$
; ...oder UninstallString aus Registry

;-------------------------------------------------------
; filter for opsiServiceCall productOnClient_getObjects:
;-------------------------------------------------------
Set $ProductFilter$              = "*" + $StrippedProductId$
Set $ProductFilterForbidden$     = ""
{{^ifdef_legacy}}
; only the o4i package should set the traget confguration to forbidden:
if ($isO4I$ = "true") and ($isDFN$ = "false")
	Set $ProductFilterForbidden$ = "*dfn_" + $StrippedProductId$
endif
{{/ifdef_legacy}}
Set $ProductVersionFilter$       = "*"

;-------------------------------------------------------
; Install/uninstall options
; https://docs.anaconda.com/anaconda/install/silent-mode/
;-------------------------------------------------------
Set $Inst_Opts$        	= "/InstallationType=AllUsers  /AddToPath=0 /RegisterPython=" + $pr_RegisterSystemPython$ + " /S  /D=" + $InstallDir$
Set $Uninst_Opts$      	= "/S"

;-------------------------------------------------------
; Various commands
;-------------------------------------------------------
Set $ActivateBat$		= $InstallDir$ + "Scripts\activate.bat"
Set $CondaUpgradeCmd$	= "conda install -y -q anaconda python conda"
Set $CondaUpdateCmd$	= "conda update -y -q --all"
Set $CondaCleanCmd$		= "conda clean -y --all"
Set $CondaInstallCmd$	= "conda install -y"
